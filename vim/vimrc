if has('vim_starting')
	" Be iMproved
	set nocompatible

	" Required:
	set runtimepath+=~/.vim/bundle/neobundle.vim/
endif

" Required:
call neobundle#begin(expand('~/.vim/bundle/'))

" Let NeoBundle manage NeoBundle
" Required:
NeoBundleFetch 'Shougo/neobundle.vim'

" My Bundles here:
" Refer to |:NeoBundle-examples|.
" Note: You don't set neobundle setting in .gvimrc!

NeoBundle 'Valloric/YouCompleteMe', {
			\ 'build' : {
			\    'unix' : './install.sh --clang-completer --system-libclang',
			\    'cygwin' : './install.sh --clang-completer --system-libclang',
			\   },
			\ }

NeoBundle 'marijnh/tern_for_vim', {
			\ 'build' : {
			\     'cygwin' : 'npm install',
			\     'unix' : 'npm install'
			\    },
			\ }


NeoBundle 'pangloss/vim-javascript'
NeoBundle 'szw/vim-ctrlspace'
NeoBundle 'scrooloose/syntastic'
NeoBundle 'SirVer/ultisnips'
NeoBundle 'honza/vim-snippets'
NeoBundle 'mhinz/vim-signify'
NeoBundle 'bling/vim-airline'
NeoBundle 'c0r73x/vimdir.vim'
NeoBundle 'xsbeats/vim-blade' 
NeoBundle 'mattn/emmet-vim'
NeoBundle 'dockyard/vim-easydir'
NeoBundle 'rendom/vvt.nu-vim'
NeoBundle 'Lokaltog/vim-easymotion'
NeoBundle 'digitaltoad/vim-jade'
NeoBundle 'rking/ag.vim'
NeoBundle 'tpope/vim-fugitive'
NeoBundle 'fatih/vim-go'
NeoBundle 'Shougo/unite.vim'
NeoBundle 'Shougo/vimproc.vim'
NeoBundle 'tpope/vim-surround'

"if has("unix")
"	let s:uname = system("uname")
"	if s:uname != "Darwin\n"
"		NeoBundle 'fatih/vim-go'
"	endif
"endif

call neobundle#end()

" Required:
filetype plugin indent on

" If there are uninstalled bundles found on startup,
" this will conveniently prompt you to install them.
NeoBundleCheck

let mapleader = "\<space>"
nnoremap <space> <nop>
" set dirs
set backupdir=$HOME/.vim/swap/backup//
set undodir=$HOME/.vim/swap/undo//
set directory=$HOME/.vim/swap//

"jumphax
set iskeyword+=_,$,@,%,#

"global
set t_Co=256
colorscheme distinguished

syntax on
set nu
set history=1000
set undolevels=1000
set encoding=utf-8
set autoindent
set smartindent
set shiftwidth=4
set expandtab
set tabstop=4
set softtabstop=4
set nowrap
set linebreak

set noesckeys
set ttimeout
set ttimeoutlen=50

set laststatus=2


" ignore case in search
set ignorecase
set smartcase

set conceallevel=2
set concealcursor=nc

" Search stuff
set hlsearch
set showmatch
set incsearch

" utf8
set encoding=utf-8

" highlight cursor line
set cursorline

" split opening
set splitbelow
set splitright

" javascript jox
let javascript_enable_domhtmlcss = 1
let g:javascript_conceal = 1
let g:syntastic_javascript_checkers = ['jshint']


"ultisnips
let g:UltiSnipsDontReverseSearchPath = 1
let g:UltiSnipsSnippetDirectories    = ["UltiSnips", "snips"]
let g:UltiSnipsExpandTrigger         = "<C-l>"
let g:UltiSnipsJumpForwardTrigger    = "<C-l>"
let g:UltiSnipsJumpBackwardTrigger   = "<C-h>"
let g:UltiSnipsUsePythonVersion      = 2

" unite {{{2
 let g:unite_source_buffer_time_format = "%Y-%m-%d %H:%M:%S "
 let g:unite_source_grep_command       = 'ag'
 let g:unite_source_grep_default_opts  = '--nocolor --follow --nogroup --column'
  let g:unite_source_find_default_opts  = '-L'
  let g:unite_source_rec_async_command  = 'ag --follow --nocolor --nogroup --column -g ""'
let g:unite_source_grep_recursive_opt = ''

call unite#filters#matcher_default#use(['matcher_fuzzy'])
call unite#custom#profile('default', 'context', {
            \    'start_insert': 1,
            \    'direction': 'botright',
            \    'auto_size': 1
            \ })
" 2}}}

set nocompatible
set norelativenumber
set nocursorline
"set nolazyredraw
"set nottyfast
source $HOME/.vim/mappings.vim
