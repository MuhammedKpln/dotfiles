function todo(){
	if [ -e ./.todo.txt ]; then
		vim ./.todo.txt
	else
		vim ~/.todo.txt
	fi
}

#function pping(){
	#ping $(echo $1 | perl -i -pe 's/(https?:\/\/)//g' | perl -i -pe 's/\/.?+$//g')
#	ping $(echo $1 | perl -i -pe 's/^(?:https?:\/\/)([^\/]*).*/\1/mig')
#}


#function getHostname() {
#	if [ $# -ge 2 ]; then
#		local host="$(echo ${@: -1} | perl -pe 's/^https?:\/\/([^\/]*).*/\1/mig')"
#		eval "$1 $host ${@:2:$# -1}"
#	fi
#}

function changedFiles(){
    find $1 -mtime -1 -ls
}

function getip(){
	IPADDRS=$(dig +short "$@")
	echo $IPADDRS
	echo 'cmd+v'
	echo $IPADDRS | pbcopy
}

function getHostname() {
	if [ $# -ge 2 ]; then
		_args=("$@")
		local out=''
		local host=''

		for a in "${_args[@]:1}"; do
			if [[ $a =~ ^(https?:\/\/)?([^\/]*) ]]; then
				out="$out $(echo $a \
					 | perl -pe 's/^(https?:\/\/)?([^\/]*).*/$2/mig')"
			else
				out="$out $a"
			fi
		done
	fi

	eval "$1 $out"
}


alias ping='getHostname =ping'
alias dig='getHostname =dig'
alias whois='getHostname =whois'

movieMode(){
    xset -dpms &
    xset s noblank &
    xset s off
}

# https://github.com/MrElendig/dotfiles-alice/blob/master/.zshrc
autoload -U colors zsh/terminfo
colors
setprompt() {
	# load some modules
	setopt prompt_subst

	# make some aliases for the colours: (coud use normal escap.seq's too)
	for color in RED GREEN YELLOW BLUE MAGENTA CYAN WHITE; do
		eval PR_$color='%{$fg[${(L)color}]%}'
	done
	PR_NO_COLOR="%{$terminfo[sgr0]%}"

	# Check the UID
	if [[ $UID -ge 1000 ]]; then # normal user
		eval PR_USER='${PR_GREEN}%n${PR_NO_COLOR}'
		eval PR_USER_OP='${PR_GREEN}%#${PR_NO_COLOR}'
	elif [[ $UID -eq 0 ]]; then # root
		eval PR_USER='${PR_RED}%n${PR_NO_COLOR}'
		eval PR_USER_OP='${PR_RED}%#${PR_NO_COLOR}'
	fi

	# Check if we are on SSH or not
	if [[ -n "$SSH_CLIENT"  ||  -n "$SSH2_CLIENT" ]]; then
		eval PR_HOST='${PR_YELLOW}%M${PR_NO_COLOR}' #SSH
	else
		eval PR_HOST='${PR_GREEN}%M${PR_NO_COLOR}' # no SSH
	fi
	# set the prompt
	PS1=$'${PR_CYAN}[${PR_USER}${PR_CYAN}@${PR_HOST}${PR_CYAN}][${PR_BLUE}%~${PR_CYAN}]${PR_USER_OP} '
	PS2=$'%_>'
	RPROMPT=$'${vcs_info_msg_0_}'
}
setprompt


_force_rehash() {
    (( CURRENT == 1 )) && rehash
    return 1 # Because we didn't really complete anything
}

#Git branch + fzf
gb() {
    local branches branch
    branches=$(git branch) &&
    branch=$(echo "$branches" | fzf +m) &&
    git checkout $(echo "$branch" | sed "s/.* //")
}

gcommit() {
    local commits selectedCommits
    commits=$(git status -s) &&
    selectedCommits=$(echo "${commits}" | fzf -m -e) &&
    git commit $(echo "${selectedCommits}" | sed "s/.* //")
}
scrotupl(){
   scrot 'scrotupl_scrot.png' -e 'imgupload $f && rm ~/scrotupl_scrot.png' 
}
dragupl(){
    scrot -s 'scrotupl_scrot.png' -e 'imgupload $f && rm ~/scrotupl_scrot.png'
}


#Stream @ twitch.
reaming() {
    INRES="1920x1080" # input resolution
    OUTRES="1920x1080" # output resolution
    FPS="20"
    GOP="40" # i-frame interval, should be double of FPS, 
    GOPMIN="20" 
    THREADS="2" 
    CBR="1000k" 
    QUALITY="ultrafast"  
    AUDIO_RATE="44100"
    STREAM_KEY="$1" # use the terminal command `streaming streamkeyhere` to stream your video to twitch or justin
    SERVER="live-fra" 

    ffmpeg -f x11grab -s "$INRES" -r "$FPS" -i :0.0 -f lavfi -i aevalsrc=0 -c:v copy -c:a libvo_aacenc -f flv -ac 2 -ar $AUDIO_RATE \
        -vcodec libx264 -g $GOP -keyint_min $GOPMIN -b $CBR -minrate $CBR -maxrate $CBR -pix_fmt yuv420p\
        -s $OUTRES -preset $QUALITY -tune film -threads $THREADS -strict normal \
        -bufsize $CBR "rtmp://$SERVER.twitch.tv/app/$STREAM_KEY"
}



#  vim: set ts=4 sw=4 tw=79 ft=zsh fdm=marker et :
